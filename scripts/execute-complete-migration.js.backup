#!/usr/bin/env node

/**
 * Complete Role System Migration Execution Script
 * Implements comprehensive migration with safety checks, validation, and rollback
 */

const { Client } = require('pg');
const fs = require('fs').promises;
const path = require('path');

// Database configuration
const dbConfig = {
    host: '127.0.0.1',
    port: 54322,
    database: 'postgres',
    user: 'postgres',
    password: 'postgres'
};

// Migration configuration
const MIGRATION_CONFIG = {
    batchSize: 100,
    maxRetries: 3,
    timeoutMs: 30000,
    validationChecks: true,
    createBackups: true,
    enableRollback: true
};

class MigrationExecutor {
    constructor() {
        this.client = null;
        this.migrationId = `migration_${Date.now()}`;
        this.startTime = null;
        this.errors = [];
        this.warnings = [];
        this.stats = {
            usersProcessed: 0,
            policiesUpdated: 0,
            backupsCreated: 0,
            validationsPassed: 0
        };
    }

    /**
     * Initialize database connection and migration logging
     */
    async initialize() {
        try {
            this.client = new Client(dbConfig);
            await this.client.connect();
            console.log('✅ Database connection established');

            // Initialize migration logging
            await this.initializeMigrationLogging();
            console.log('✅ Migration logging initialized');

            return true;
        } catch (error) {
            console.error('❌ Initialization failed:', error.message);
            return false;
        }
    }

    /**
     * Initialize migration logging table
     */
    async initializeMigrationLogging() {
        const createLogTableQuery = `
            CREATE TABLE IF NOT EXISTS migration_execution_log (
                id SERIAL PRIMARY KEY,
                migration_id VARCHAR(255) NOT NULL,
                phase VARCHAR(100) NOT NULL,
                status VARCHAR(50) NOT NULL,
                message TEXT,
                details JSONB,
                created_at TIMESTAMP DEFAULT NOW()
            );
        `;

        await this.client.query(createLogTableQuery);
        
        // Log migration start
        await this.logMigrationEvent('INITIALIZATION', 'STARTED', 'Migration execution started', {
            migrationId: this.migrationId,
            config: MIGRATION_CONFIG
        });
    }

    /**
     * Log migration events
     */
    async logMigrationEvent(phase, status, message, details = {}) {
        try {
            await this.client.query(
                'INSERT INTO migration_execution_log (migration_id, phase, status, message, details) VALUES ($1, $2, $3, $4, $5)',
                [this.migrationId, phase, status, message, JSON.stringify(details)]
            );
        } catch (error) {
            console.warn('⚠️  Failed to log migration event:', error.message);
        }
    }

    /**
     * Pre-migration validation checks
     */
    async runPreMigrationValidation() {
        console.log('\n🔍 Running pre-migration validation checks...');
        
        const validations = [
            this.validateDatabaseConnection,
            this.validateUserRoleEnum,
            this.validateUserProfilesTable,
            this.validateBackupCapability,
            this.validateRLSPolicies,
            this.validateMigrationInfrastructure
        ];

        for (const validation of validations) {
            try {
                const result = await validation.call(this);
                if (!result.success) {
                    this.errors.push(`Pre-migration validation failed: ${result.error}`);
                    await this.logMigrationEvent('PRE_VALIDATION', 'FAILED', result.error);
                    return false;
                }
                this.stats.validationsPassed++;
                await this.logMigrationEvent('PRE_VALIDATION', 'PASSED', result.message);
            } catch (error) {
                this.errors.push(`Validation error: ${error.message}`);
                await this.logMigrationEvent('PRE_VALIDATION', 'ERROR', error.message);
                return false;
            }
        }

        console.log(`✅ All ${validations.length} pre-migration validations passed`);
        return true;
    }

    /**
     * Validate database connection and permissions
     */
    async validateDatabaseConnection() {
        const result = await this.client.query('SELECT current_user, current_database(), version()');
        return {
            success: true,
            message: `Database connection validated: ${result.rows[0].current_user}@${result.rows[0].current_database()}`
        };
    }

    /**
     * Validate user_role enum exists with correct values
     */
    async validateUserRoleEnum() {
        const result = await this.client.query(`
            SELECT enumlabel 
            FROM pg_enum 
            WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'user_role')
            ORDER BY enumsortorder
        `);

        const expectedRoles = ['management', 'purchase_manager', 'technical_lead', 'project_manager', 'client', 'admin'];
        const actualRoles = result.rows.map(row => row.enumlabel);
        
        const missingRoles = expectedRoles.filter(role => !actualRoles.includes(role));
        if (missingRoles.length > 0) {
            return {
                success: false,
                error: `Missing required roles in user_role enum: ${missingRoles.join(', ')}`
            };
        }

        return {
            success: true,
            message: `user_role enum validated with ${actualRoles.length} roles`
        };
    }

    /**
     * Validate user_profiles table structure
     */
    async validateUserProfilesTable() {
        const result = await this.client.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'user_profiles'
            ORDER BY ordinal_position
        `);

        const requiredColumns = ['id', 'role', 'seniority_level', 'previous_role', 'role_migrated_at'];
        const actualColumns = result.rows.map(row => row.column_name);
        
        const missingColumns = requiredColumns.filter(col => !actualColumns.includes(col));
        if (missingColumns.length > 0) {
            return {
                success: false,
                error: `Missing required columns in user_profiles: ${missingColumns.join(', ')}`
            };
        }

        return {
            success: true,
            message: `user_profiles table validated with ${actualColumns.length} columns`
        };
    }

    /**
     * Validate backup capability
     */
    async validateBackupCapability() {
        try {
            // Test backup table creation
            const testTableName = `backup_test_${Date.now()}`;
            await this.client.query(`
                CREATE TABLE ${testTableName} AS 
                SELECT * FROM user_profiles LIMIT 1
            `);
            
            const result = await this.client.query(`SELECT COUNT(*) FROM ${testTableName}`);
            await this.client.query(`DROP TABLE ${testTableName}`);

            return {
                success: true,
                message: 'Backup capability validated successfully'
            };
        } catch (error) {
            return {
                success: false,
                error: `Backup validation failed: ${error.message}`
            };
        }
    }

    /**
     * Validate RLS policies are ready
     */
    async validateRLSPolicies() {
        const result = await this.client.query(`
            SELECT COUNT(*) as policy_count
            FROM pg_policies 
            WHERE schemaname = 'public'
            AND (qual LIKE '%user_role_old%' OR with_check LIKE '%user_role_old%')
        `);

        if (parseInt(result.rows[0].policy_count) > 0) {
            return {
                success: false,
                error: `Found ${result.rows[0].policy_count} policies still referencing user_role_old`
            };
        }

        return {
            success: true,
            message: 'RLS policies validated - no references to user_role_old found'
        };
    }

    /**
     * Validate migration infrastructure
     */
    async validateMigrationInfrastructure() {
        const requiredTables = [
            'migration_backup_user_profiles',
            'migration_validation_functions',
            'migration_rollback_log'
        ];

        for (const table of requiredTables) {
            const result = await this.client.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = $1
                )
            `, [table]);

            if (!result.rows[0].exists) {
                return {
                    success: false,
                    error: `Required migration table missing: ${table}`
                };
            }
        }

        return {
            success: true,
            message: `Migration infrastructure validated - ${requiredTables.length} tables found`
        };
    }

    /**
     * Create comprehensive backups
     */
    async createBackups() {
        console.log('\n💾 Creating comprehensive backups...');

        try {
            // Create timestamped backup
            const backupTimestamp = new Date().toISOString().replace(/[:.]/g, '-');
            
            // Backup user_profiles
            await this.client.query(`
                CREATE TABLE migration_backup_user_profiles_${backupTimestamp} AS 
                SELECT * FROM user_profiles
            `);

            // Backup RLS policies (already done in previous task)
            const policyBackupResult = await this.client.query(`
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_name LIKE 'rls_policy_backup_%'
            `);

            this.stats.backupsCreated = 2;
            
            await this.logMigrationEvent('BACKUP', 'COMPLETED', 'Comprehensive backups created', {
                userProfilesBackup: `migration_backup_user_profiles_${backupTimestamp}`,
                rlsPolicyBackups: policyBackupResult.rows[0].count,
                timestamp: backupTimestamp
            });

            console.log('✅ Backups created successfully');
            return true;

        } catch (error) {
            this.errors.push(`Backup creation failed: ${error.message}`);
            await this.logMigrationEvent('BACKUP', 'FAILED', error.message);
            return false;
        }
    }

    /**
     * Execute the main migration in a transaction
     */
    async executeMigration() {
        console.log('\n🚀 Executing migration in transaction...');

        try {
            await this.client.query('BEGIN');
            await this.logMigrationEvent('MIGRATION', 'STARTED', 'Transaction started');

            // Step 1: Update user roles (if not already done)
            const migrationResult = await this.updateUserRoles();
            if (!migrationResult.success) {
                throw new Error(migrationResult.error);
            }

            // Step 2: Verify role assignments
            const verificationResult = await this.verifyRoleAssignments();
            if (!verificationResult.success) {
                throw new Error(verificationResult.error);
            }

            // Step 3: Update JWT generation functions (if they exist)
            await this.updateJWTFunctions();

            await this.client.query('COMMIT');
            await this.logMigrationEvent('MIGRATION', 'COMPLETED', 'Transaction committed successfully');

            console.log('✅ Migration executed successfully');
            return true;

        } catch (error) {
            await this.client.query('ROLLBACK');
            this.errors.push(`Migration execution failed: ${error.message}`);
            await this.logMigrationEvent('MIGRATION', 'FAILED', error.message);
            console.error('❌ Migration failed, transaction rolled back');
            return false;
        }
    }

    /**
     * Update user roles if needed
     */
    async updateUserRoles() {
        // Check if migration is already complete
        const checkResult = await this.client.query(`
            SELECT COUNT(*) as unmigrated_count
            FROM user_profiles 
            WHERE role_migrated_at IS NULL
        `);

        const unmigratedCount = parseInt(checkResult.rows[0].unmigrated_count);
        
        if (unmigratedCount === 0) {
            return {
                success: true,
                message: 'User roles already migrated'
            };
        }

        console.log(`📊 Found ${unmigratedCount} users to migrate`);

        // Execute role migration
        const migrationQuery = `
            UPDATE user_profiles 
            SET 
                previous_role = role,
                role = CASE 
                    WHEN role = 'company_owner' THEN 'management'::user_role
                    WHEN role = 'general_manager' THEN 'management'::user_role
                    WHEN role = 'deputy_general_manager' THEN 'management'::user_role
                    WHEN role = 'technical_director' THEN 'technical_lead'::user_role
                    WHEN role = 'architect' THEN 'project_manager'::user_role
                    WHEN role = 'technical_engineer' THEN 'project_manager'::user_role
                    WHEN role = 'field_worker' THEN 'project_manager'::user_role
                    WHEN role = 'purchase_director' THEN 'purchase_manager'::user_role
                    WHEN role = 'purchase_specialist' THEN 'purchase_manager'::user_role
                    WHEN role = 'project_manager' THEN 'project_manager'::user_role
                    WHEN role = 'subcontractor' THEN 'project_manager'::user_role
                    WHEN role = 'client' THEN 'client'::user_role
                    WHEN role = 'admin' THEN 'admin'::user_role
                    ELSE role
                END,
                seniority_level = CASE 
                    WHEN role IN ('company_owner', 'general_manager') THEN 'executive'
                    WHEN role IN ('deputy_general_manager', 'technical_director', 'purchase_director', 'architect') THEN 'senior'
                    ELSE 'regular'
                END,
                role_migrated_at = NOW()
            WHERE role_migrated_at IS NULL
        `;

        const result = await this.client.query(migrationQuery);
        this.stats.usersProcessed = result.rowCount;

        return {
            success: true,
            message: `Successfully migrated ${result.rowCount} users`
        };
    }

    /**
     * Verify role assignments after migration
     */
    async verifyRoleAssignments() {
        const verificationQueries = [
            {
                name: 'Role distribution',
                query: 'SELECT role, COUNT(*) as count FROM user_profiles GROUP BY role ORDER BY count DESC'
            },
            {
                name: 'Seniority distribution',
                query: 'SELECT seniority_level, COUNT(*) as count FROM user_profiles GROUP BY seniority_level ORDER BY count DESC'
            },
            {
                name: 'Migration completeness',
                query: 'SELECT COUNT(*) as total, COUNT(role_migrated_at) as migrated FROM user_profiles'
            }
        ];

        for (const check of verificationQueries) {
            const result = await this.client.query(check.query);
            console.log(`📊 ${check.name}:`);
            console.table(result.rows);
            
            await this.logMigrationEvent('VERIFICATION', 'INFO', check.name, {
                results: result.rows
            });
        }

        return { success: true, message: 'Role assignments verified' };
    }

    /**
     * Update JWT generation functions if they exist
     */
    async updateJWTFunctions() {
        // Check if custom JWT functions exist
        const functionsResult = await this.client.query(`
            SELECT routine_name 
            FROM information_schema.routines 
            WHERE routine_schema = 'public' 
            AND routine_type = 'FUNCTION'
            AND (routine_name LIKE '%jwt%' OR routine_name LIKE '%token%')
            AND routine_definition LIKE '%user_role%'
        `);

        if (functionsResult.rows.length > 0) {
            console.log(`🔧 Found ${functionsResult.rows.length} JWT-related functions to update`);
            
            // Log the functions that need manual review
            await this.logMigrationEvent('JWT_FUNCTIONS', 'REVIEW_NEEDED', 'JWT functions require manual review', {
                functions: functionsResult.rows.map(row => row.routine_name)
            });
            
            this.warnings.push('JWT functions found that may need manual updates');
        }

        return { success: true };
    }

    /**
     * Post-migration validation
     */
    async runPostMigrationValidation() {
        console.log('\n✅ Running post-migration validation...');

        const validations = [
            this.validateMigrationCompleteness,
            this.validateRoleConsistency,
            this.validateSeniorityAssignment,
            this.validateDataIntegrity
        ];

        for (const validation of validations) {
            try {
                const result = await validation.call(this);
                if (!result.success) {
                    this.errors.push(`Post-migration validation failed: ${result.error}`);
                    return false;
                }
                await this.logMigrationEvent('POST_VALIDATION', 'PASSED', result.message);
            } catch (error) {
                this.errors.push(`Post-validation error: ${error.message}`);
                return false;
            }
        }

        console.log('✅ All post-migration validations passed');
        return true;
    }

    /**
     * Validate migration completeness
     */
    async validateMigrationCompleteness() {
        const result = await this.client.query(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(role_migrated_at) as migrated_users,
                COUNT(*) - COUNT(role_migrated_at) as unmigrated_users
            FROM user_profiles
        `);

        const stats = result.rows[0];
        if (parseInt(stats.unmigrated_users) > 0) {
            return {
                success: false,
                error: `${stats.unmigrated_users} users not migrated out of ${stats.total_users}`
            };
        }

        return {
            success: true,
            message: `All ${stats.total_users} users successfully migrated`
        };
    }

    /**
     * Validate role consistency
     */
    async validateRoleConsistency() {
        const result = await this.client.query(`
            SELECT role, COUNT(*) as count
            FROM user_profiles 
            WHERE role NOT IN ('admin', 'management', 'technical_lead', 'project_manager', 'purchase_manager', 'client')
            GROUP BY role
        `);

        if (result.rows.length > 0) {
            return {
                success: false,
                error: `Found users with invalid roles: ${result.rows.map(r => `${r.role}(${r.count})`).join(', ')}`
            };
        }

        return {
            success: true,
            message: 'All user roles are valid'
        };
    }

    /**
     * Validate seniority assignment
     */
    async validateSeniorityAssignment() {
        const result = await this.client.query(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(seniority_level) as users_with_seniority
            FROM user_profiles
        `);

        const stats = result.rows[0];
        if (parseInt(stats.total_users) !== parseInt(stats.users_with_seniority)) {
            return {
                success: false,
                error: `${parseInt(stats.total_users) - parseInt(stats.users_with_seniority)} users missing seniority level`
            };
        }

        return {
            success: true,
            message: 'All users have seniority levels assigned'
        };
    }

    /**
     * Validate data integrity
     */
    async validateDataIntegrity() {
        const checks = [
            {
                name: 'Previous role preservation',
                query: 'SELECT COUNT(*) as count FROM user_profiles WHERE previous_role IS NULL AND role_migrated_at IS NOT NULL'
            },
            {
                name: 'Migration timestamp consistency',
                query: 'SELECT COUNT(*) as count FROM user_profiles WHERE role_migrated_at > NOW()'
            }
        ];

        for (const check of checks) {
            const result = await this.client.query(check.query);
            if (parseInt(result.rows[0].count) > 0) {
                return {
                    success: false,
                    error: `Data integrity check failed: ${check.name} (${result.rows[0].count} issues)`
                };
            }
        }

        return {
            success: true,
            message: 'Data integrity validated'
        };
    }

    /**
     * Generate migration report
     */
    async generateMigrationReport() {
        const endTime = new Date();
        const duration = endTime - this.startTime;

        const report = {
            migrationId: this.migrationId,
            startTime: this.startTime,
            endTime: endTime,
            duration: `${Math.round(duration / 1000)}s`,
            status: this.errors.length === 0 ? 'SUCCESS' : 'FAILED',
            statistics: this.stats,
            errors: this.errors,
            warnings: this.warnings
        };

        // Save report to database
        await this.logMigrationEvent('COMPLETION', report.status, 'Migration completed', report);

        // Save report to file
        const reportPath = path.join(__dirname, `migration-report-${this.migrationId}.json`);
        await fs.writeFile(reportPath, JSON.stringify(report, null, 2));

        console.log('\n📊 MIGRATION REPORT');
        console.log('==================');
        console.log(`Status: ${report.status}`);
        console.log(`Duration: ${report.duration}`);
        console.log(`Users processed: ${this.stats.usersProcessed}`);
        console.log(`Validations passed: ${this.stats.validationsPassed}`);
        console.log(`Backups created: ${this.stats.backupsCreated}`);
        
        if (this.errors.length > 0) {
            console.log(`\n❌ Errors (${this.errors.length}):`);
            this.errors.forEach(error => console.log(`  - ${error}`));
        }

        if (this.warnings.length > 0) {
            console.log(`\n⚠️  Warnings (${this.warnings.length}):`);
            this.warnings.forEach(warning => console.log(`  - ${warning}`));
        }

        console.log(`\n📄 Full report saved to: ${reportPath}`);

        return report;
    }

    /**
     * Cleanup resources
     */
    async cleanup() {
        if (this.client) {
            await this.client.end();
            console.log('🔌 Database connection closed');
        }
    }

    /**
     * Main execution method
     */
    async execute() {
        this.startTime = new Date();
        console.log('🚀 Starting Complete Role System Migration');
        console.log('==========================================');
        console.log(`Migration ID: ${this.migrationId}`);
        console.log(`Start time: ${this.startTime.toISOString()}`);

        try {
            // Initialize
            if (!(await this.initialize())) {
                throw new Error('Migration initialization failed');
            }

            // Pre-migration validation
            if (!(await this.runPreMigrationValidation())) {
                throw new Error('Pre-migration validation failed');
            }

            // Create backups
            if (!(await this.createBackups())) {
                throw new Error('Backup creation failed');
            }

            // Execute migration
            if (!(await this.executeMigration())) {
                throw new Error('Migration execution failed');
            }

            // Post-migration validation
            if (!(await this.runPostMigrationValidation())) {
                throw new Error('Post-migration validation failed');
            }

            console.log('\n🎉 MIGRATION COMPLETED SUCCESSFULLY!');

        } catch (error) {
            console.error('\n💥 MIGRATION FAILED:', error.message);
            this.errors.push(error.message);
        } finally {
            // Generate report
            await this.generateMigrationReport();
            
            // Cleanup
            await this.cleanup();
        }

        return this.errors.length === 0;
    }
}

// Execute if run directly
if (require.main === module) {
    const executor = new MigrationExecutor();
    executor.execute()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('Unexpected error:', error);
            process.exit(1);
        });
}

module.exports = { MigrationExecutor };