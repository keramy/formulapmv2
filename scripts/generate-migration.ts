#!/usr/bin/env node

/**
 * Formula PM 2.0 - Migration Template Generator
 * 
 * Generates properly formatted SQL migration files with best practices
 * and validation-compliant syntax.
 * 
 * Usage:
 *   npm run generate-migration -- "description of migration"
 *   npx tsx scripts/generate-migration.ts "add user roles table"
 */

import * as fs from 'fs';
import * as path from 'path';

interface MigrationTemplate {
  type: 'table' | 'column' | 'index' | 'constraint' | 'custom';
  name: string;
  template: string;
}

class MigrationGenerator {
  private migrationsDir: string;
  private templates: MigrationTemplate[];

  constructor() {
    this.migrationsDir = path.join(process.cwd(), 'supabase', 'migrations');
    this.templates = this.initializeTemplates();
  }

  /**
   * Initialize migration templates
   */
  private initializeTemplates(): MigrationTemplate[] {
    return [
      {
        type: 'table',
        name: 'Create Table',
        template: `-- Create table: {{tableName}}
-- Description: {{description}}
-- Author: Generated by Formula PM Migration Generator
-- Date: {{date}}

CREATE TABLE {{tableName}} (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    -- Add your columns here
    -- Example: name TEXT NOT NULL,
    -- Example: email TEXT UNIQUE NOT NULL,
    -- Example: status TEXT DEFAULT 'active' NOT NULL,
    
    -- Constraints
    CONSTRAINT ck_{{tableName}}_status CHECK (status IN ('active', 'inactive'))
);

-- Create indexes for performance
CREATE INDEX idx_{{tableName}}_created_at ON {{tableName}} (created_at);

-- Enable Row Level Security
ALTER TABLE {{tableName}} ENABLE ROW LEVEL SECURITY;

-- Create policies (customize as needed)
CREATE POLICY "Users can read their own {{tableName}}" ON {{tableName}}
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own {{tableName}}" ON {{tableName}}
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own {{tableName}}" ON {{tableName}}
    FOR UPDATE USING (auth.uid() = user_id);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_{{tableName}}_updated_at
    BEFORE UPDATE ON {{tableName}}
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Add helpful comments
COMMENT ON TABLE {{tableName}} IS '{{description}}';
COMMENT ON COLUMN {{tableName}}.created_at IS 'Timestamp when record was created';
COMMENT ON COLUMN {{tableName}}.updated_at IS 'Timestamp when record was last updated';
`
      },
      {
        type: 'column',
        name: 'Add Column',
        template: `-- Add column to table: {{tableName}}
-- Description: {{description}}
-- Author: Generated by Formula PM Migration Generator
-- Date: {{date}}

-- Add new column
ALTER TABLE {{tableName}} 
ADD COLUMN {{columnName}} {{columnType}} {{constraints}};

-- Add index if needed for performance
-- CREATE INDEX idx_{{tableName}}_{{columnName}} ON {{tableName}} ({{columnName}});

-- Add comment
COMMENT ON COLUMN {{tableName}}.{{columnName}} IS '{{description}}';

-- Update existing records if needed
-- UPDATE {{tableName}} SET {{columnName}} = 'default_value' WHERE {{columnName}} IS NULL;
`
      },
      {
        type: 'index',
        name: 'Add Index',
        template: `-- Add index to table: {{tableName}}
-- Description: {{description}}
-- Author: Generated by Formula PM Migration Generator
-- Date: {{date}}

-- Create index for performance optimization
CREATE INDEX idx_{{tableName}}_{{columnName}} ON {{tableName}} ({{columnName}});

-- For composite indexes, use:
-- CREATE INDEX idx_{{tableName}}_{{columnName1}}_{{columnName2}} ON {{tableName}} ({{columnName1}}, {{columnName2}});

-- For unique indexes, use:
-- CREATE UNIQUE INDEX idx_{{tableName}}_{{columnName}}_unique ON {{tableName}} ({{columnName}});

-- For partial indexes, use:
-- CREATE INDEX idx_{{tableName}}_{{columnName}}_partial ON {{tableName}} ({{columnName}}) WHERE condition;
`
      },
      {
        type: 'constraint',
        name: 'Add Constraint',
        template: `-- Add constraint to table: {{tableName}}
-- Description: {{description}}
-- Author: Generated by Formula PM Migration Generator
-- Date: {{date}}

-- Add constraint (customize as needed)
ALTER TABLE {{tableName}} 
ADD CONSTRAINT ck_{{tableName}}_{{constraintName}} CHECK ({{condition}});

-- Examples of different constraint types:
-- Foreign Key: ADD CONSTRAINT fk_{{tableName}}_{{columnName}} FOREIGN KEY ({{columnName}}) REFERENCES {{referencedTable}} (id);
-- Unique: ADD CONSTRAINT uk_{{tableName}}_{{columnName}} UNIQUE ({{columnName}});
-- Check: ADD CONSTRAINT ck_{{tableName}}_{{columnName}} CHECK ({{condition}});
`
      },
      {
        type: 'custom',
        name: 'Custom Migration',
        template: `-- Custom migration: {{description}}
-- Author: Generated by Formula PM Migration Generator
-- Date: {{date}}

-- Add your custom SQL here
-- Remember to follow Formula PM migration best practices:
-- 1. Use transactions for complex operations
-- 2. Add proper constraints and indexes
-- 3. Include rollback instructions in comments
-- 4. Test with sample data
-- 5. Consider performance implications

-- Example transaction:
BEGIN;

-- Your SQL operations here

COMMIT;

-- Rollback instructions (for documentation):
-- To rollback this migration:
-- DROP TABLE IF EXISTS table_name;
-- ALTER TABLE existing_table DROP COLUMN column_name;
`
      }
    ];
  }

  /**
   * Generate timestamp for migration filename
   */
  private generateTimestamp(): string {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    
    return `${year}${month}${day}${hours}${minutes}${seconds}`;
  }

  /**
   * Generate migration filename
   */
  private generateFilename(description: string): string {
    const timestamp = this.generateTimestamp();
    const sanitizedDescription = description
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .trim()
      .replace(/\s+/g, '_');
    
    return `${timestamp}_${sanitizedDescription}.sql`;
  }

  /**
   * Replace template variables
   */
  private replaceTemplateVariables(template: string, variables: Record<string, string>): string {
    let result = template;
    
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`{{${key}}}`, 'g');
      result = result.replace(regex, value);
    });
    
    return result;
  }

  /**
   * Show interactive template selection
   */
  private async selectTemplate(): Promise<MigrationTemplate> {
    console.log('\n🎯 Select migration template:');
    this.templates.forEach((template, index) => {
      console.log(`${index + 1}. ${template.name}`);
    });
    
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    return new Promise((resolve) => {
      rl.question('\nEnter template number (1-5): ', (answer: string) => {
        const index = parseInt(answer) - 1;
        if (index >= 0 && index < this.templates.length) {
          resolve(this.templates[index]);
        } else {
          console.log('Invalid selection, using custom template');
          resolve(this.templates[this.templates.length - 1]);
        }
        rl.close();
      });
    });
  }

  /**
   * Get template variables from user
   */
  private async getTemplateVariables(template: MigrationTemplate, description: string): Promise<Record<string, string>> {
    const variables: Record<string, string> = {
      description: description,
      date: new Date().toISOString().split('T')[0]
    };
    
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const ask = (question: string): Promise<string> => {
      return new Promise((resolve) => {
        rl.question(question, resolve);
      });
    };
    
    try {
      switch (template.type) {
        case 'table':
          variables.tableName = await ask('Table name: ');
          break;
          
        case 'column':
          variables.tableName = await ask('Table name: ');
          variables.columnName = await ask('Column name: ');
          variables.columnType = await ask('Column type (e.g., TEXT, INTEGER, BOOLEAN): ');
          variables.constraints = await ask('Constraints (e.g., NOT NULL, DEFAULT value): ');
          break;
          
        case 'index':
          variables.tableName = await ask('Table name: ');
          variables.columnName = await ask('Column name: ');
          break;
          
        case 'constraint':
          variables.tableName = await ask('Table name: ');
          variables.constraintName = await ask('Constraint name: ');
          variables.condition = await ask('Condition (for CHECK constraint): ');
          break;
      }
    } finally {
      rl.close();
    }
    
    return variables;
  }

  /**
   * Generate migration file
   */
  async generateMigration(description: string, templateType?: string): Promise<string> {
    if (!description) {
      throw new Error('Migration description is required');
    }
    
    // Create migrations directory if it doesn't exist
    if (!fs.existsSync(this.migrationsDir)) {
      fs.mkdirSync(this.migrationsDir, { recursive: true });
    }
    
    let selectedTemplate: MigrationTemplate;
    
    if (templateType) {
      selectedTemplate = this.templates.find(t => t.type === templateType) || this.templates[this.templates.length - 1];
    } else {
      selectedTemplate = await this.selectTemplate();
    }
    
    const variables = await this.getTemplateVariables(selectedTemplate, description);
    const content = this.replaceTemplateVariables(selectedTemplate.template, variables);
    
    const filename = this.generateFilename(description);
    const filepath = path.join(this.migrationsDir, filename);
    
    fs.writeFileSync(filepath, content);
    
    return filepath;
  }

  /**
   * Show available templates
   */
  showTemplates(): void {
    console.log('\n📋 Available migration templates:');
    this.templates.forEach((template, index) => {
      console.log(`${index + 1}. ${template.name} (${template.type})`);
    });
  }

  /**
   * Show help
   */
  showHelp(): void {
    console.log(`
Formula PM 2.0 - Migration Template Generator

Usage:
  npm run generate-migration -- "description"
  npx tsx scripts/generate-migration.ts "description"

Options:
  --type <type>    Specify template type (table, column, index, constraint, custom)
  --templates      Show available templates
  --help           Show this help message

Examples:
  npm run generate-migration -- "add user roles table"
  npx tsx scripts/generate-migration.ts "add email column to users" --type column
  npx tsx scripts/generate-migration.ts --templates
    `);
  }
}

// CLI Implementation
async function main() {
  const args = process.argv.slice(2);
  const generator = new MigrationGenerator();
  
  if (args.includes('--help') || args.includes('-h')) {
    generator.showHelp();
    return;
  }
  
  if (args.includes('--templates')) {
    generator.showTemplates();
    return;
  }
  
  const typeIndex = args.indexOf('--type');
  const templateType = typeIndex !== -1 ? args[typeIndex + 1] : undefined;
  
  const description = args.find(arg => !arg.startsWith('--') && arg !== templateType);
  
  if (!description) {
    console.error('❌ Migration description is required');
    generator.showHelp();
    process.exit(1);
  }
  
  try {
    console.log('🚀 Generating migration...');
    const filepath = await generator.generateMigration(description, templateType);
    console.log(`✅ Migration generated: ${filepath}`);
    console.log('\n💡 Next steps:');
    console.log('1. Review and customize the generated migration');
    console.log('2. Run: npm run validate-migrations to check for issues');
    console.log('3. Run: supabase db push to apply the migration');
  } catch (error) {
    console.error('❌ Error generating migration:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

export { MigrationGenerator };