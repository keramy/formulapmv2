#!/usr/bin/env node

/**
 * Migration Status Monitoring Script
 * Provides real-time monitoring of migration progress and health checks
 */

const { Client } = require('pg');

const dbConfig = {
    host: '127.0.0.1',
    port: 54322,
    database: 'postgres',
    user: 'postgres',
    password: 'postgres'
};

class MigrationMonitor {
    constructor() {
        this.client = null;
        this.monitoringInterval = null;
        this.isMonitoring = false;
    }

    async initialize() {
        try {
            this.client = new Client(dbConfig);
            await this.client.connect();
            console.log('‚úÖ Connected to database for monitoring');
            return true;
        } catch (error) {
            console.error('‚ùå Failed to connect to database:', error.message);
            return false;
        }
    }

    /**
     * Get current migration status
     */
    async getMigrationStatus() {
        try {
            // Check if migration log table exists
            const logTableExists = await this.client.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'migration_execution_log'
                )
            `);

            if (!logTableExists.rows[0].exists) {
                return {
                    status: 'NOT_STARTED',
                    message: 'Migration has not been started yet'
                };
            }

            // Get latest migration info
            const latestMigration = await this.client.query(`
                SELECT 
                    migration_id,
                    phase,
                    status,
                    message,
                    created_at,
                    details
                FROM migration_execution_log 
                ORDER BY created_at DESC 
                LIMIT 1
            `);

            if (latestMigration.rows.length === 0) {
                return {
                    status: 'NOT_STARTED',
                    message: 'No migration records found'
                };
            }

            const latest = latestMigration.rows[0];
            
            // Get migration progress
            const progress = await this.getMigrationProgress(latest.migration_id);
            
            return {
                status: latest.status,
                phase: latest.phase,
                message: latest.message,
                migrationId: latest.migration_id,
                lastUpdate: latest.created_at,
                progress: progress
            };

        } catch (error) {
            return {
                status: 'ERROR',
                message: `Failed to get migration status: ${error.message}`
            };
        }
    }

    /**
     * Get detailed migration progress
     */
    async getMigrationProgress(migrationId) {
        try {
            const progressQuery = await this.client.query(`
                SELECT 
                    phase,
                    status,
                    COUNT(*) as count,
                    MAX(created_at) as last_update
                FROM migration_execution_log 
                WHERE migration_id = $1
                GROUP BY phase, status
                ORDER BY last_update DESC
            `, [migrationId]);

            const userMigrationStatus = await this.client.query(`
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(role_migrated_at) as migrated_users,
                    COUNT(CASE WHEN role_migrated_at IS NULL THEN 1 END) as pending_users
                FROM user_profiles
            `);

            return {
                phases: progressQuery.rows,
                userMigration: userMigrationStatus.rows[0]
            };

        } catch (error) {
            return {
                error: `Failed to get migration progress: ${error.message}`
            };
        }
    }

    /**
     * Get system health metrics during migration
     */
    async getSystemHealth() {
        try {
            const healthChecks = await Promise.all([
                this.checkDatabaseConnections(),
                this.checkTableLocks(),
                this.checkActiveTransactions(),
                this.checkDiskSpace(),
                this.checkReplicationLag()
            ]);

            return {
                timestamp: new Date().toISOString(),
                checks: healthChecks.reduce((acc, check) => {
                    acc[check.name] = check;
                    return acc;
                }, {})
            };

        } catch (error) {
            return {
                error: `Health check failed: ${error.message}`
            };
        }
    }

    /**
     * Check database connections
     */
    async checkDatabaseConnections() {
        try {
            const result = await this.client.query(`
                SELECT 
                    count(*) as total_connections,
                    count(*) FILTER (WHERE state = 'active') as active_connections,
                    count(*) FILTER (WHERE state = 'idle') as idle_connections
                FROM pg_stat_activity
            `);

            const stats = result.rows[0];
            return {
                name: 'database_connections',
                status: 'healthy',
                details: stats
            };

        } catch (error) {
            return {
                name: 'database_connections',
                status: 'error',
                error: error.message
            };
        }
    }

    /**
     * Check for table locks
     */
    async checkTableLocks() {
        try {
            const result = await this.client.query(`
                SELECT 
                    schemaname,
                    tablename,
                    mode,
                    granted
                FROM pg_locks l
                JOIN pg_class c ON l.relation = c.oid
                JOIN pg_namespace n ON c.relnamespace = n.oid
                WHERE schemaname = 'public'
                AND tablename IN ('user_profiles', 'user_roles')
            `);

            return {
                name: 'table_locks',
                status: result.rows.length > 0 ? 'warning' : 'healthy',
                details: {
                    active_locks: result.rows.length,
                    locks: result.rows
                }
            };

        } catch (error) {
            return {
                name: 'table_locks',
                status: 'error',
                error: error.message
            };
        }
    }

    /**
     * Check active transactions
     */
    async checkActiveTransactions() {
        try {
            const result = await this.client.query(`
                SELECT 
                    count(*) as active_transactions,
                    max(now() - xact_start) as longest_transaction
                FROM pg_stat_activity 
                WHERE state = 'active' 
                AND xact_start IS NOT NULL
            `);

            const stats = result.rows[0];
            return {
                name: 'active_transactions',
                status: 'healthy',
                details: stats
            };

        } catch (error) {
            return {
                name: 'active_transactions',
                status: 'error',
                error: error.message
            };
        }
    }

    /**
     * Check disk space
     */
    async checkDiskSpace() {
        try {
            const result = await this.client.query(`
                SELECT 
                    pg_size_pretty(pg_database_size(current_database())) as database_size,
                    pg_size_pretty(pg_total_relation_size('user_profiles')) as user_profiles_size
            `);

            return {
                name: 'disk_space',
                status: 'healthy',
                details: result.rows[0]
            };

        } catch (error) {
            return {
                name: 'disk_space',
                status: 'error',
                error: error.message
            };
        }
    }

    /**
     * Check replication lag (if applicable)
     */
    async checkReplicationLag() {
        try {
            // This is a placeholder - actual implementation depends on replication setup
            return {
                name: 'replication_lag',
                status: 'not_applicable',
                details: { message: 'No replication configured' }
            };

        } catch (error) {
            return {
                name: 'replication_lag',
                status: 'error',
                error: error.message
            };
        }
    }

    /**
     * Display migration status in a formatted way
     */
    displayStatus(status, health) {
        console.clear();
        console.log('üîç MIGRATION STATUS MONITOR');
        console.log('===========================');
        console.log(`Timestamp: ${new Date().toISOString()}`);
        console.log('');

        // Migration Status
        console.log('üìä MIGRATION STATUS');
        console.log('------------------');
        console.log(`Status: ${this.getStatusIcon(status.status)} ${status.status}`);
        if (status.phase) console.log(`Phase: ${status.phase}`);
        if (status.message) console.log(`Message: ${status.message}`);
        if (status.migrationId) console.log(`Migration ID: ${status.migrationId}`);
        if (status.lastUpdate) console.log(`Last Update: ${status.lastUpdate}`);
        console.log('');

        // Progress Details
        if (status.progress && status.progress.userMigration) {
            const userStats = status.progress.userMigration;
            console.log('üë• USER MIGRATION PROGRESS');
            console.log('--------------------------');
            console.log(`Total Users: ${userStats.total_users}`);
            console.log(`Migrated: ${userStats.migrated_users}`);
            console.log(`Pending: ${userStats.pending_users}`);
            
            if (parseInt(userStats.total_users) > 0) {
                const percentage = Math.round((parseInt(userStats.migrated_users) / parseInt(userStats.total_users)) * 100);
                console.log(`Progress: ${percentage}%`);
                console.log(`Progress Bar: ${'‚ñà'.repeat(Math.floor(percentage/5))}${'‚ñë'.repeat(20-Math.floor(percentage/5))} ${percentage}%`);
            }
            console.log('');
        }

        // Phase Progress
        if (status.progress && status.progress.phases) {
            console.log('üîÑ PHASE PROGRESS');
            console.log('----------------');
            status.progress.phases.forEach(phase => {
                console.log(`${phase.phase}: ${this.getStatusIcon(phase.status)} ${phase.status} (${phase.count} events)`);
            });
            console.log('');
        }

        // System Health
        console.log('üíö SYSTEM HEALTH');
        console.log('----------------');
        Object.entries(health.checks).forEach(([name, check]) => {
            console.log(`${name}: ${this.getStatusIcon(check.status)} ${check.status}`);
            if (check.error) {
                console.log(`  Error: ${check.error}`);
            }
        });
        console.log('');

        console.log('Press Ctrl+C to stop monitoring');
    }

    /**
     * Get status icon for display
     */
    getStatusIcon(status) {
        const icons = {
            'SUCCESS': '‚úÖ',
            'COMPLETED': '‚úÖ',
            'PASSED': '‚úÖ',
            'healthy': 'üíö',
            'STARTED': 'üîÑ',
            'IN_PROGRESS': 'üîÑ',
            'warning': '‚ö†Ô∏è',
            'FAILED': '‚ùå',
            'ERROR': '‚ùå',
            'error': '‚ùå',
            'NOT_STARTED': '‚è∏Ô∏è',
            'not_applicable': '‚ûñ'
        };
        return icons[status] || '‚ùì';
    }

    /**
     * Start continuous monitoring
     */
    async startMonitoring(intervalSeconds = 5) {
        if (this.isMonitoring) {
            console.log('‚ö†Ô∏è  Monitoring is already running');
            return;
        }

        console.log(`üîç Starting migration monitoring (refresh every ${intervalSeconds}s)`);
        this.isMonitoring = true;

        this.monitoringInterval = setInterval(async () => {
            try {
                const [status, health] = await Promise.all([
                    this.getMigrationStatus(),
                    this.getSystemHealth()
                ]);

                this.displayStatus(status, health);

                // Stop monitoring if migration is complete or failed
                if (['SUCCESS', 'FAILED', 'COMPLETED'].includes(status.status)) {
                    console.log('\nüèÅ Migration completed, stopping monitoring');
                    this.stopMonitoring();
                }

            } catch (error) {
                console.error('‚ùå Monitoring error:', error.message);
            }
        }, intervalSeconds * 1000);

        // Initial display
        const [status, health] = await Promise.all([
            this.getMigrationStatus(),
            this.getSystemHealth()
        ]);
        this.displayStatus(status, health);
    }

    /**
     * Stop monitoring
     */
    stopMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }
        this.isMonitoring = false;
        console.log('üõë Monitoring stopped');
    }

    /**
     * Cleanup resources
     */
    async cleanup() {
        this.stopMonitoring();
        if (this.client) {
            await this.client.end();
        }
    }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Shutting down monitor...');
    if (global.monitor) {
        await global.monitor.cleanup();
    }
    process.exit(0);
});

// Execute if run directly
if (require.main === module) {
    const monitor = new MigrationMonitor();
    global.monitor = monitor;

    monitor.initialize()
        .then(success => {
            if (success) {
                const intervalSeconds = process.argv[2] ? parseInt(process.argv[2]) : 5;
                monitor.startMonitoring(intervalSeconds);
            } else {
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('Failed to start monitoring:', error);
            process.exit(1);
        });
}

module.exports = { MigrationMonitor };