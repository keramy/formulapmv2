/**
 * Clients API - Replace mock data with real database integration
 * Uses withAuth pattern from Kiro's optimizations
 */

import { NextRequest } from 'next/server'
import { withAuth, createSuccessResponse, createErrorResponse, parseQueryParams, createPagination } from '@/lib/api-middleware'
import { createClient } from '@/lib/supabase/server'

// GET /api/clients - List clients with pagination and search
export const GET = withAuth(async (request: NextRequest, { user, profile }) => {
  const { page, limit, search, sort_field = 'name', sort_direction, filters } = parseQueryParams(request)
  
  try {
    const supabase = await createClient()
    
    // Build query with project count
    let query = supabase
      .from('clients')
      .select(`
        *,
        projects(id)
      `, { count: 'exact' })
    
    // Apply search filter
    if (search) {
      query = query.or(`name.ilike.%${search}%,contact_person.ilike.%${search}%,email.ilike.%${search}%`)
    }
    
    // Apply status filter
    if (filters.status && filters.status !== 'all') {
      query = query.eq('is_active', filters.status === 'active')
    }
    
    // Apply sorting
    query = query.order(sort_field, { ascending: sort_direction === 'asc' })
    
    // Apply pagination
    const from = (page - 1) * limit
    query = query.range(from, from + limit - 1)
    
    const { data: clients, error, count } = await query
    
    if (error) {
      console.error('Error fetching clients:', error)
      return createErrorResponse('Failed to fetch clients', 500)
    }
    
    // Transform data to match frontend expectations
    const transformedClients = clients?.map(client => ({
      id: client.id,
      name: client.name,
      email: client.email,
      phone: client.phone,
      company: client.contact_person, // Using contact_person as company for compatibility
      location: `${client.city || ''}${client.city && client.state ? ', ' : ''}${client.state || ''}`.trim() || undefined,
      status: client.is_active ? 'active' : 'inactive',
      projects_count: client.projects?.length || 0,
      last_activity: client.updated_at?.split('T')[0], // Format as YYYY-MM-DD
      created_at: client.created_at?.split('T')[0], // Format as YYYY-MM-DD
      type: 'company' as const // Default to company type
    })) || []
    
    return createSuccessResponse(
      transformedClients,
      createPagination(page, limit, count || 0)
    )
    
  } catch (error) {
    console.error('Clients API error:', error)
    return createErrorResponse('Internal server error', 500)
  }
}, { permission: 'users.read.all' })

// POST /api/clients - Create new client
export const POST = withAuth(async (request: NextRequest, { user, profile }) => {
  try {
    const body = await request.json()
    const supabase = await createClient()
    
    // Validate required fields
    if (!body.name || !body.email) {
      return createErrorResponse('Name and email are required', 400)
    }
    
    const clientData = {
      name: body.name,
      contact_person: body.company || body.contact_person,
      email: body.email,
      phone: body.phone || null,
      address: body.address || null,
      city: body.location?.split(',')[0]?.trim() || null,
      state: body.location?.split(',')[1]?.trim() || null,
      zip_code: body.zip_code || null,
      country: body.country || 'USA',
      tax_id: body.tax_id || null,
      is_active: true
    }
    
    const { data: client, error } = await supabase
      .from('clients')
      .insert(clientData)
      .select()
      .single()
    
    if (error) {
      console.error('Error creating client:', error)
      if (error.code === '23505') { // Unique constraint violation
        return createErrorResponse('Client with this email already exists', 409)
      }
      return createErrorResponse('Failed to create client', 500)
    }
    
    return createSuccessResponse(client)
    
  } catch (error) {
    console.error('Client creation error:', error)
    return createErrorResponse('Internal server error', 500)
  }
}, { permission: 'users.read.all' })