/**
 * Formula PM 2.0 Project Milestones API - Project-Specific Route
 * V3 Phase 1 Implementation
 * 
 * Handles project-specific milestone operations: listing and creating milestones for a specific project
 */

import { NextRequest, NextResponse } from 'next/server'
import { withAuth, createSuccessResponse, createErrorResponse } from '@/lib/api-middleware'
import { createServerClient } from '@/lib/supabase'
import { hasPermission } from '@/lib/permissions'
import { 
  validateMilestoneFormData,
  validateMilestoneListParams,
  validateMilestonePermissions,
  calculateMilestoneStatus
} from '@/lib/validation/milestones'
import { MilestoneStatistics } from '@/types/milestones'

// ============================================================================
// GET /api/projects/[id]/milestones - List milestones for a specific project
// ============================================================================

export const GET = withAuth(async (request: NextRequest, context: { params: Promise<{ id: string }> }, { user, profile }) => {
,
      { status: 401 }
    )
  }

  // Permission check
  if (!hasPermission(profile.role, 'projects.read.all') && 
      !hasPermission(profile.role, 'projects.read.assigned') &&
      !hasPermission(profile.role, 'projects.read.own')) {
    return createErrorResponse('Insufficient permissions to view project milestones' , 403)
  }

  try {
    const params = await context.params
    const projectId = params.id

    // Validate UUID format
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    if (!uuidRegex.test(projectId)) {
      return createErrorResponse('Invalid project ID format' , 400)
    }

    const supabase = createServerClient()

    // Check if user has access to this project
    const hasProjectAccess = await verifyProjectAccess(supabase, user, projectId)
    if (!hasProjectAccess) {
      return createErrorResponse('Access denied to this project' , 403)
    }

    // Verify project exists
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .select('id, name, status')
      .eq('id', projectId)
      .single()

    if (projectError || !project) {
      return createErrorResponse('Project not found' , 404)
    }

    const url = new URL(request.url)
    const queryParams = {
      page: parseInt(url.searchParams.get('page') || '1'),
      limit: parseInt(url.searchParams.get('limit') || '50'), // Higher default for project-specific view
      include_creator: url.searchParams.get('include_creator') === 'true',
      include_project: url.searchParams.get('include_project') === 'true',
      filters: {
        status: url.searchParams.get('status')?.split(',') as any || undefined,
        search: url.searchParams.get('search') || undefined,
        target_date_start: url.searchParams.get('target_date_start') || undefined,
        target_date_end: url.searchParams.get('target_date_end') || undefined,
        overdue_only: url.searchParams.get('overdue_only') === 'true',
        upcoming_only: url.searchParams.get('upcoming_only') === 'true',
        completed_only: url.searchParams.get('completed_only') === 'true',
        created_by: url.searchParams.get('created_by') || undefined
      },
      sort: url.searchParams.get('sort_field') ? {
        field: url.searchParams.get('sort_field') as any,
        direction: (url.searchParams.get('sort_direction') || 'asc') as 'asc' | 'desc'
      } : undefined
    }

    // Validate parameters
    const validationResult = validateMilestoneListParams(queryParams)
    if (!validationResult.success) {
      return createErrorResponse('Invalid parameters',
          details: validationResult.error.issues 
        , 400)
    }

    // Build query for project-specific milestones
    let query = supabase
      .from('project_milestones')
      .select(`
        *,
        ${queryParams.include_creator ? 'creator:user_profiles!created_by(id, first_name, last_name, email, avatar_url),' : ''}
        ${queryParams.include_project ? 'project:projects!project_id(id, name, status),' : ''}
        project_id
      `, { count: 'exact' })
      .eq('project_id', projectId)

    // Apply filters
    const filters = queryParams.filters
    if (filters) {
      if (filters.status?.length) {
        query = query.in('status', filters.status)
      }

      if (filters.search) {
        query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
      }

      if (filters.target_date_start) {
        query = query.gte('target_date', filters.target_date_start)
      }

      if (filters.target_date_end) {
        query = query.lte('target_date', filters.target_date_end)
      }

      if (filters.created_by) {
        query = query.eq('created_by', filters.created_by)
      }

      // Handle exclusive filters
      if (filters.overdue_only) {
        const today = new Date().toISOString().split('T')[0]
        query = query
          .lt('target_date', today)
          .in('status', ['upcoming', 'in_progress', 'overdue'])
      }

      if (filters.upcoming_only) {
        const today = new Date().toISOString().split('T')[0]
        query = query
          .gte('target_date', today)
          .eq('status', 'upcoming')
      }

      if (filters.completed_only) {
        query = query.eq('status', 'completed')
      }
    }

    // Apply sorting
    if (queryParams.sort) {
      query = query.order(queryParams.sort.field, { ascending: queryParams.sort.direction === 'asc' })
    } else {
      query = query.order('target_date', { ascending: true })
    }

    // Apply pagination
    const from = (queryParams.page - 1) * queryParams.limit
    const to = from + queryParams.limit - 1
    query = query.range(from, to)

    const { data: milestones, error: fetchError, count } = await query

    if (fetchError) {
      console.error('Project milestones fetch error:', fetchError)
      return createErrorResponse('Failed to fetch project milestones' , 500)
    }

    // Update overdue status for milestones
    const enhancedMilestones = milestones?.map(milestone => {
      const currentStatus = calculateMilestoneStatus((milestone as any).target_date, (milestone as any).actual_date)
      return {
        ...(milestone as any),
        is_overdue: currentStatus === 'overdue',
        days_until_due: calculateDaysUntilDue((milestone as any).target_date),
        creator: queryParams.include_creator ? (milestone as any).creator : undefined,
        project: queryParams.include_project ? (milestone as any).project : undefined
      }
    }) || []

    // Calculate project-specific statistics
    const statistics = await calculateProjectMilestoneStatistics(
      supabase,
      projectId,
      queryParams.filters
    )

    return NextResponse.json({
      success: true,
      data: {
        project: {
          id: project.id,
          name: project.name,
          status: project.status
        },
        milestones: enhancedMilestones,
        statistics
      },
      pagination: {
        page: queryParams.page,
        limit: queryParams.limit,
        total: count || 0,
        has_more: queryParams.page * queryParams.limit < (count || 0)
      }
    })

  } catch (error) {
    console.error('Project milestones API error:', error)
    return createErrorResponse('Internal server error' , 500)
  }
}

// ============================================================================
// POST /api/projects/[id]/milestones - Create new milestone for a specific project
// ============================================================================

export const POST = withAuth(async (request: NextRequest, context: { params: Promise<{ id: string }> }, { user, profile }) => {
,
      { status: 401 }
    )
  }

  // Permission check
  if (!validateMilestonePermissions(profile.role, 'create')) {
    return createErrorResponse('Insufficient permissions to create milestones' , 403)
  }

  try {
    const params = await context.params
    const projectId = params.id

    // Validate UUID format
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    if (!uuidRegex.test(projectId)) {
      return createErrorResponse('Invalid project ID format' , 400)
    }

    const supabase = createServerClient()

    // Check if user has access to this project
    const hasProjectAccess = await verifyProjectAccess(supabase, user, projectId)
    if (!hasProjectAccess) {
      return createErrorResponse('Access denied to this project' , 403)
    }

    // Verify project exists
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .select('id, name, status')
      .eq('id', projectId)
      .single()

    if (projectError || !project) {
      return createErrorResponse('Project not found' , 404)
    }

    const body = await request.json()
    
    // Add project_id to body for validation
    const milestoneData = {
      ...body,
      project_id: projectId
    }

    // Validate milestone data
    const validationResult = validateMilestoneFormData(milestoneData)
    if (!validationResult.success) {
      return createErrorResponse('Invalid milestone data',
          details: validationResult.error.issues 
        , 400)
    }

    const validatedData = validationResult.data

    // Calculate automatic status based on target date
    const calculatedStatus = calculateMilestoneStatus(validatedData.target_date)
    
    // Prepare milestone data
    const insertData = {
      project_id: projectId,
      name: validatedData.name,
      description: validatedData.description || null,
      target_date: validatedData.target_date,
      status: calculatedStatus,
      created_by: user.id
    }

    const { data: milestone, error: insertError } = await supabase
      .from('project_milestones')
      .insert(insertData)
      .select(`
        *,
        creator:user_profiles!created_by(id, first_name, last_name, email, avatar_url),
        project:projects!project_id(id, name, status)
      `)
      .single()

    if (insertError) {
      console.error('Project milestone creation error:', insertError)
      return createErrorResponse('Failed to create milestone' , 500)
    }

    // Add computed fields
    const enhancedMilestone = {
      ...milestone,
      is_overdue: calculatedStatus === 'overdue',
      days_until_due: calculateDaysUntilDue(milestone.target_date)
    }

    // Get updated project statistics
    const statistics = await calculateProjectMilestoneStatistics(supabase, projectId)

    return NextResponse.json({
      success: true,
      message: 'Milestone created successfully',
      data: {
        milestone: enhancedMilestone,
        statistics
      }
    }, { status: 201 })

  } catch (error) {
    console.error('Project milestone creation API error:', error)
    return createErrorResponse('Internal server error' , 500)
  }
}

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

async function verifyProjectAccess(supabase: any, user: any, projectId: string): Promise<boolean> {
  try {
    // Management roles can access all projects
    if (['company_owner', 'general_manager', 'deputy_general_manager', 'technical_director', 'admin'].includes(user.role)) {
      return true
    }

    // Check if user is assigned to this project
    const { data: assignment } = await supabase
      .from('project_assignments')
      .select('id')
      .eq('project_id', projectId)
      .eq('user_id', user.id)
      .eq('is_active', true)
      .single()

    if (assignment) {
      return true
    }

    // Check if user is the project manager
    const { data: project } = await supabase
      .from('projects')
      .select('project_manager_id')
      .eq('id', projectId)
      .single()

    if (project?.project_manager_id === user.id) {
      return true
    }

    // Check if user is a client assigned to this project
    if (user.role === 'client') {
      const { data: clientProject } = await supabase
        .from('projects')
        .select('client_id')
        .eq('id', projectId)
        .single()

      if (clientProject) {
        const { data: client } = await supabase
          .from('clients')
          .select('user_id')
          .eq('id', clientProject.client_id)
          .single()

        return client?.user_id === user.id
      }
    }

    return false
  } catch (error) {
    console.error('Access check error:', error)
    return false
  }
}

function calculateDaysUntilDue(targetDate: string): number {
  const today = new Date()
  today.setHours(0, 0, 0, 0)
  
  const target = new Date(targetDate)
  target.setHours(0, 0, 0, 0)
  
  const diffTime = target.getTime() - today.getTime()
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24))
}

async function calculateProjectMilestoneStatistics(
  supabase: any,
  projectId: string,
  filters?: any
): Promise<MilestoneStatistics> {
  let query = supabase
    .from('project_milestones')
    .select('*')
    .eq('project_id', projectId)

  // Apply filters if provided
  if (filters) {
    if (filters.status?.length) {
      query = query.in('status', filters.status)
    }
    if (filters.target_date_start) {
      query = query.gte('target_date', filters.target_date_start)
    }
    if (filters.target_date_end) {
      query = query.lte('target_date', filters.target_date_end)
    }
    if (filters.created_by) {
      query = query.eq('created_by', filters.created_by)
    }
  }

  const { data: milestones } = await query

  if (!milestones) {
    return getEmptyStatistics()
  }

  const today = new Date().toISOString().split('T')[0]
  
  const stats: MilestoneStatistics = {
    total: milestones.length,
    byStatus: {
      upcoming: 0,
      in_progress: 0,
      completed: 0,
      overdue: 0,
      cancelled: 0
    },
    overdue: 0,
    upcoming: 0,
    completed: 0,
    completionRate: 0
  }

  milestones.forEach((milestone: any) => {
    // Count by status
    stats.byStatus[milestone.status as keyof typeof stats.byStatus]++

    // Count specific categories
    if (milestone.status === 'completed') {
      stats.completed++
    } else if (milestone.status === 'overdue' || 
               (milestone.target_date < today && !['completed', 'cancelled'].includes(milestone.status))) {
      stats.overdue++
    } else if (milestone.status === 'upcoming') {
      stats.upcoming++
    }
  })

  // Calculate completion rate
  if (stats.total > 0) {
    stats.completionRate = Math.round((stats.completed / stats.total) * 100)
  }

  return stats
}

function getEmptyStatistics(): MilestoneStatistics {
  return {
    total: 0,
    byStatus: {
      upcoming: 0,
      in_progress: 0,
      completed: 0,
      overdue: 0,
      cancelled: 0
    },
    overdue: 0,
    upcoming: 0,
    completed: 0,
    completionRate: 0
  }
}