/**
 * Formula PM 2.0 Task Management Integration Tests
 * V3 Phase 1 Implementation
 * 
 * End-to-end tests for task management functionality
 */

import { render, screen, waitFor, fireEvent } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { TasksTab } from '@/components/projects/tabs/TasksTab'
import { AuthProvider } from '@/contexts/AuthContext'
import { createMockAuthContext } from '../utils/test-utils'

// Mock fetch globally
global.fetch = jest.fn()

// Mock useRouter
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
    replace: jest.fn(),
    prefetch: jest.fn(),
  }),
}))

// Mock toast
jest.mock('@/components/ui/use-toast', () => ({
  useToast: () => ({
    toast: jest.fn(),
  }),
}))

describe('Task Management Integration', () => {
  const mockProjectId = '123e4567-e89b-12d3-a456-426614174000'
  const mockAuthContext = createMockAuthContext()
  
  const mockTasks = [
    {
      id: '1',
      title: 'Implement user authentication',
      description: 'Add JWT authentication to the API',
      status: 'in_progress',
      priority: 'high',
      assigned_to: 'user-1',
      assigned_by: 'user-2',
      project_id: mockProjectId,
      due_date: '2025-08-01',
      estimated_hours: 8,
      tags: ['backend', 'security'],
      created_at: '2025-07-01T10:00:00Z',
      updated_at: '2025-07-01T10:00:00Z',
      assignee: {
        id: 'user-1',
        first_name: 'John',
        last_name: 'Doe',
        email: 'john@example.com',
        full_name: 'John Doe'
      },
      assigner: {
        id: 'user-2',
        first_name: 'Jane',
        last_name: 'Smith',
        email: 'jane@example.com',
        full_name: 'Jane Smith'
      }
    },
    {
      id: '2',
      title: 'Design database schema',
      description: 'Create ERD and migration files',
      status: 'completed',
      priority: 'medium',
      assigned_to: 'user-3',
      assigned_by: 'user-2',
      project_id: mockProjectId,
      due_date: '2025-07-15',
      estimated_hours: 4,
      tags: ['database', 'design'],
      created_at: '2025-07-01T11:00:00Z',
      updated_at: '2025-07-05T14:00:00Z',
      completed_at: '2025-07-05T14:00:00Z',
      actual_hours: 3.5,
      assignee: {
        id: 'user-3',
        first_name: 'Mike',
        last_name: 'Johnson',
        email: 'mike@example.com',
        full_name: 'Mike Johnson'
      },
      assigner: {
        id: 'user-2',
        first_name: 'Jane',
        last_name: 'Smith',
        email: 'jane@example.com',
        full_name: 'Jane Smith'
      }
    }
  ]

  const mockStatistics = {
    total: 2,
    byStatus: {
      pending: 0,
      in_progress: 1,
      review: 0,
      completed: 1,
      cancelled: 0,
      blocked: 0
    },
    byPriority: {
      low: 0,
      medium: 1,
      high: 1,
      urgent: 0
    },
    overdue: 0,
    dueThisWeek: 0,
    completed: 1,
    assignedToMe: 1
  }

  const mockProjectMembers = [
    {
      id: 'user-1',
      first_name: 'John',
      last_name: 'Doe',
      email: 'john@example.com',
      full_name: 'John Doe',
      role: 'project_manager'
    },
    {
      id: 'user-2',
      first_name: 'Jane',
      last_name: 'Smith',
      email: 'jane@example.com',
      full_name: 'Jane Smith',
      role: 'technical_engineer'
    },
    {
      id: 'user-3',
      first_name: 'Mike',
      last_name: 'Johnson',
      email: 'mike@example.com',
      full_name: 'Mike Johnson',
      role: 'architect'
    }
  ]

  beforeEach(() => {
    jest.clearAllMocks()
    localStorage.setItem('auth_token', 'mock-token')
    
    // Mock successful API responses by default
    ;(global.fetch as jest.Mock).mockImplementation((url: string) => {
      if (url.includes('/api/projects/') && url.includes('/tasks')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({
            success: true,
            data: {
              tasks: mockTasks,
              statistics: mockStatistics
            }
          })
        })
      }
      
      if (url.includes('/api/projects/') && url.includes('/assignments')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({
            success: true,
            data: {
              assignments: mockProjectMembers.map(member => ({
                user: member
              }))
            }
          })
        })
      }
      
      return Promise.resolve({
        ok: false,
        status: 404,
        json: () => Promise.resolve({ success: false, error: 'Not found' })
      })
    })
  })

  afterEach(() => {
    localStorage.clear()
  })

  it('should display tasks and statistics on load', async () => {
    render(
      <AuthProvider {...mockAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for data to load
    await waitFor(() => {
      expect(screen.getByText('Implement user authentication')).toBeInTheDocument()
    })

    // Check statistics are displayed
    expect(screen.getByText('2')).toBeInTheDocument() // Total tasks
    expect(screen.getByText('1')).toBeInTheDocument() // Completed
    
    // Check task details
    expect(screen.getByText('Design database schema')).toBeInTheDocument()
    expect(screen.getByText('HIGH')).toBeInTheDocument()
    expect(screen.getByText('MEDIUM')).toBeInTheDocument()
  })

  it('should create a new task', async () => {
    const user = userEvent.setup()
    
    render(
      <AuthProvider {...mockAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for initial load
    await waitFor(() => {
      expect(screen.getByText('Project Tasks')).toBeInTheDocument()
    })

    // Click create task button
    const createButton = screen.getByRole('button', { name: /create task/i })
    await user.click(createButton)

    // Fill in task form
    const titleInput = screen.getByLabelText(/title/i)
    await user.type(titleInput, 'New test task')

    const descriptionInput = screen.getByLabelText(/description/i)
    await user.type(descriptionInput, 'This is a test task description')

    // Mock successful task creation
    ;(global.fetch as jest.Mock).mockImplementationOnce(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({
          success: true,
          data: {
            task: {
              id: '3',
              title: 'New test task',
              description: 'This is a test task description',
              status: 'pending',
              priority: 'medium',
              project_id: mockProjectId,
              assigned_by: mockAuthContext.user.id,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            },
            statistics: { ...mockStatistics, total: 3 }
          }
        })
      })
    )

    // Submit form
    const saveButton = screen.getByRole('button', { name: /save/i })
    await user.click(saveButton)

    // Verify API was called correctly
    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledWith(
        expect.stringContaining('/api/projects/'),
        expect.objectContaining({
          method: 'POST',
          headers: expect.objectContaining({
            'Content-Type': 'application/json',
            'Authorization': 'Bearer mock-token'
          }),
          body: expect.stringContaining('New test task')
        })
      )
    })
  })

  it('should update task status', async () => {
    const user = userEvent.setup()
    
    render(
      <AuthProvider {...mockAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for tasks to load
    await waitFor(() => {
      expect(screen.getByText('Implement user authentication')).toBeInTheDocument()
    })

    // Mock successful status update
    ;(global.fetch as jest.Mock).mockImplementationOnce(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({
          success: true,
          data: {
            task: { ...mockTasks[0], status: 'completed' }
          }
        })
      })
    )

    // Find and click status change button (implementation depends on TaskList component)
    // This is a placeholder for the actual interaction
    // await user.click(statusChangeButton)

    // Verify API was called
    // expect(global.fetch).toHaveBeenCalledWith(
    //   expect.stringContaining('/api/tasks/'),
    //   expect.objectContaining({
    //     method: 'PUT'
    //   })
    // )
  })

  it('should filter tasks by status', async () => {
    const user = userEvent.setup()
    
    render(
      <AuthProvider {...mockAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for tasks to load
    await waitFor(() => {
      expect(screen.getByText('Implement user authentication')).toBeInTheDocument()
      expect(screen.getByText('Design database schema')).toBeInTheDocument()
    })

    // Apply filter (implementation depends on TaskList component filters)
    // This test would interact with filter controls when implemented
  })

  it('should handle task deletion', async () => {
    const user = userEvent.setup()
    window.confirm = jest.fn(() => true)
    
    render(
      <AuthProvider {...mockAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for tasks to load
    await waitFor(() => {
      expect(screen.getByText('Implement user authentication')).toBeInTheDocument()
    })

    // Mock successful deletion
    ;(global.fetch as jest.Mock).mockImplementationOnce(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({ success: true })
      })
    )

    // Delete task (implementation depends on TaskList component)
    // await user.click(deleteButton)

    // Verify confirmation was shown
    // expect(window.confirm).toHaveBeenCalledWith('Are you sure you want to delete this task?')

    // Verify API was called
    // expect(global.fetch).toHaveBeenCalledWith(
    //   expect.stringContaining('/api/tasks/'),
    //   expect.objectContaining({
    //     method: 'DELETE'
    //   })
    // )
  })

  it('should display error state when API fails', async () => {
    ;(global.fetch as jest.Mock).mockImplementationOnce(() =>
      Promise.resolve({
        ok: false,
        json: () => Promise.resolve({ success: false, error: 'Failed to fetch tasks' })
      })
    )

    render(
      <AuthProvider {...mockAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for error to be displayed
    await waitFor(() => {
      expect(screen.getByText(/failed to fetch tasks/i)).toBeInTheDocument()
    })
  })

  it('should respect user permissions', async () => {
    // Render with limited permissions
    const limitedAuthContext = {
      ...mockAuthContext,
      profile: {
        ...mockAuthContext.profile,
        role: 'client' // Limited permissions
      }
    }

    render(
      <AuthProvider value={limitedAuthContext}>
        <TasksTab projectId={mockProjectId} />
      </AuthProvider>
    )

    // Wait for tasks to load
    await waitFor(() => {
      expect(screen.getByText('Project Tasks')).toBeInTheDocument()
    })

    // Create button should not be visible for clients
    expect(screen.queryByRole('button', { name: /create task/i })).not.toBeInTheDocument()
  })
})