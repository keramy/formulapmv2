{
  "title": "Systematic RLS Optimization Workflow Report",
  "generated_at": "2025-07-19T10:41:11.064Z",
  "completed_at": "2025-07-19T10:41:11.094Z",
  "workflow_status": "completed",
  "summary": {
    "total_tables": 2,
    "successful_tables": 2,
    "failed_tables": 0,
    "total_policies": 4,
    "optimized_policies": 3,
    "failed_policies": 0,
    "skipped_policies": 1
  },
  "table_results": [
    {
      "table_name": "projects",
      "status": "completed_successfully",
      "timestamp": "2025-07-19T10:41:11.070Z",
      "policies": {
        "total": 2,
        "analyzed": 2,
        "optimized": 2,
        "failed": 0,
        "skipped": 0,
        "no_changes_needed": 0
      },
      "transformations": [
        {
          "success": true,
          "original": {
            "tablename": "projects",
            "policyname": "projects_select_policy",
            "cmd": "SELECT",
            "permissive": "PERMISSIVE",
            "roles": [
              "authenticated"
            ],
            "qual": "user_id = auth.uid() AND status = 'active'",
            "with_check": null
          },
          "transformed": {
            "tablename": "projects",
            "policyname": "projects_select_policy",
            "cmd": "SELECT",
            "permissive": "PERMISSIVE",
            "roles": [
              "authenticated"
            ],
            "qual": "user_id = (SELECT auth.uid()) AND status = 'active'",
            "with_check": null
          },
          "changes_made": true,
          "transformations": {
            "qual": {
              "success": true,
              "original": "user_id = auth.uid() AND status = 'active'",
              "transformed": "user_id = (SELECT auth.uid()) AND status = 'active'",
              "changes_made": true,
              "transformations": [
                {
                  "pattern": "direct_uid_calls",
                  "count": 1,
                  "positions": [
                    10
                  ]
                }
              ],
              "validation": {
                "valid": true,
                "issues": [],
                "checks": {
                  "parentheses_balanced": true,
                  "logical_operators_preserved": true,
                  "no_syntax_errors": true
                }
              },
              "pattern_type": "comprehensive"
            },
            "with_check": null
          }
        },
        {
          "success": true,
          "original": {
            "tablename": "projects",
            "policyname": "projects_update_policy",
            "cmd": "UPDATE",
            "permissive": "PERMISSIVE",
            "roles": [
              "authenticated"
            ],
            "qual": "user_id = auth.uid()",
            "with_check": "user_id = auth.uid()"
          },
          "transformed": {
            "tablename": "projects",
            "policyname": "projects_update_policy",
            "cmd": "UPDATE",
            "permissive": "PERMISSIVE",
            "roles": [
              "authenticated"
            ],
            "qual": "user_id = (SELECT auth.uid())",
            "with_check": "user_id = (SELECT auth.uid())"
          },
          "changes_made": true,
          "transformations": {
            "qual": {
              "success": true,
              "original": "user_id = auth.uid()",
              "transformed": "user_id = (SELECT auth.uid())",
              "changes_made": true,
              "transformations": [
                {
                  "pattern": "direct_uid_calls",
                  "count": 1,
                  "positions": [
                    10
                  ]
                }
              ],
              "validation": {
                "valid": true,
                "issues": [],
                "checks": {
                  "parentheses_balanced": true,
                  "logical_operators_preserved": true,
                  "no_syntax_errors": true
                }
              },
              "pattern_type": "comprehensive"
            },
            "with_check": {
              "success": true,
              "original": "user_id = auth.uid()",
              "transformed": "user_id = (SELECT auth.uid())",
              "changes_made": true,
              "transformations": [
                {
                  "pattern": "direct_uid_calls",
                  "count": 1,
                  "positions": [
                    10
                  ]
                }
              ],
              "validation": {
                "valid": true,
                "issues": [],
                "checks": {
                  "parentheses_balanced": true,
                  "logical_operators_preserved": true,
                  "no_syntax_errors": true
                }
              },
              "pattern_type": "comprehensive"
            }
          }
        }
      ],
      "sql_statements": {
        "individual": [
          {
            "success": true,
            "policy_name": "projects_select_policy",
            "table_name": "projects",
            "drop_sql": "DROP POLICY IF EXISTS \"projects_select_policy\" ON \"projects\";",
            "create_sql": "CREATE POLICY \"projects_select_policy\" ON \"projects\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) AND status = 'active');",
            "transaction_sql": "-- Policy optimization for projects.projects_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"projects_select_policy\" ON \"projects\";\n\n-- Create optimized policy\nCREATE POLICY \"projects_select_policy\" ON \"projects\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) AND status = 'active');\n\nCOMMIT;",
            "rollback_sql": "-- Rollback for projects.projects_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"projects_select_policy\" ON \"projects\";\n\n-- Restore original policy\nCREATE POLICY \"projects_select_policy\" ON \"projects\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = auth.uid() AND status = 'active');\n\nCOMMIT;"
          },
          {
            "success": true,
            "policy_name": "projects_update_policy",
            "table_name": "projects",
            "drop_sql": "DROP POLICY IF EXISTS \"projects_update_policy\" ON \"projects\";",
            "create_sql": "CREATE POLICY \"projects_update_policy\" ON \"projects\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (user_id = (SELECT auth.uid())) WITH CHECK (user_id = (SELECT auth.uid()));",
            "transaction_sql": "-- Policy optimization for projects.projects_update_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"projects_update_policy\" ON \"projects\";\n\n-- Create optimized policy\nCREATE POLICY \"projects_update_policy\" ON \"projects\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (user_id = (SELECT auth.uid())) WITH CHECK (user_id = (SELECT auth.uid()));\n\nCOMMIT;",
            "rollback_sql": "-- Rollback for projects.projects_update_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"projects_update_policy\" ON \"projects\";\n\n-- Restore original policy\nCREATE POLICY \"projects_update_policy\" ON \"projects\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());\n\nCOMMIT;"
          }
        ],
        "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- projects.projects_select_policy\nDROP POLICY IF EXISTS \"projects_select_policy\" ON \"projects\";\nCREATE POLICY \"projects_select_policy\" ON \"projects\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) AND status = 'active');\n\n-- projects.projects_update_policy\nDROP POLICY IF EXISTS \"projects_update_policy\" ON \"projects\";\nCREATE POLICY \"projects_update_policy\" ON \"projects\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (user_id = (SELECT auth.uid())) WITH CHECK (user_id = (SELECT auth.uid()));\n\nCOMMIT;",
        "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback projects.projects_select_policy\nDROP POLICY IF EXISTS \"projects_select_policy\" ON \"projects\";\nCREATE POLICY \"projects_select_policy\" ON \"projects\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = auth.uid() AND status = 'active');\n\n-- Rollback projects.projects_update_policy\nDROP POLICY IF EXISTS \"projects_update_policy\" ON \"projects\";\nCREATE POLICY \"projects_update_policy\" ON \"projects\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());\n\nCOMMIT;"
      },
      "errors": []
    },
    {
      "table_name": "tasks",
      "status": "completed_successfully",
      "timestamp": "2025-07-19T10:41:11.086Z",
      "policies": {
        "total": 2,
        "analyzed": 2,
        "optimized": 1,
        "failed": 0,
        "skipped": 0,
        "no_changes_needed": 1
      },
      "transformations": [
        {
          "success": true,
          "original": {
            "tablename": "tasks",
            "policyname": "tasks_select_policy",
            "cmd": "SELECT",
            "permissive": "PERMISSIVE",
            "roles": [
              "authenticated"
            ],
            "qual": "assigned_to = auth.uid() OR created_by = auth.uid()",
            "with_check": null
          },
          "transformed": {
            "tablename": "tasks",
            "policyname": "tasks_select_policy",
            "cmd": "SELECT",
            "permissive": "PERMISSIVE",
            "roles": [
              "authenticated"
            ],
            "qual": "assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid())",
            "with_check": null
          },
          "changes_made": true,
          "transformations": {
            "qual": {
              "success": true,
              "original": "assigned_to = auth.uid() OR created_by = auth.uid()",
              "transformed": "assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid())",
              "changes_made": true,
              "transformations": [
                {
                  "pattern": "direct_uid_calls",
                  "count": 2,
                  "positions": [
                    14,
                    41
                  ]
                }
              ],
              "validation": {
                "valid": true,
                "issues": [],
                "checks": {
                  "parentheses_balanced": true,
                  "logical_operators_preserved": true,
                  "no_syntax_errors": true
                }
              },
              "pattern_type": "comprehensive"
            },
            "with_check": null
          }
        }
      ],
      "sql_statements": {
        "individual": [
          {
            "success": true,
            "policy_name": "tasks_select_policy",
            "table_name": "tasks",
            "drop_sql": "DROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";",
            "create_sql": "CREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()));",
            "transaction_sql": "-- Policy optimization for tasks.tasks_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\n\n-- Create optimized policy\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()));\n\nCOMMIT;",
            "rollback_sql": "-- Rollback for tasks.tasks_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\n\n-- Restore original policy\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = auth.uid() OR created_by = auth.uid());\n\nCOMMIT;"
          }
        ],
        "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- tasks.tasks_select_policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()));\n\nCOMMIT;",
        "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback tasks.tasks_select_policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = auth.uid() OR created_by = auth.uid());\n\nCOMMIT;"
      },
      "errors": []
    }
  ],
  "errors": [],
  "recommendations": [
    {
      "priority": "HIGH",
      "action": "Execute optimizations",
      "description": "All tables processed successfully. Ready to apply optimizations.",
      "impact": "Significant performance improvement across all RLS policies"
    }
  ]
}