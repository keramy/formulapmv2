{
  "title": "Performance Advisor High-Priority Tables Optimization Report",
  "generated_at": "2025-07-19T10:49:28.273Z",
  "completed_at": "2025-07-19T10:49:28.312Z",
  "summary": {
    "total_tables": 6,
    "successful_tables": 12,
    "failed_tables": 0,
    "total_policies": 12,
    "optimized_policies": 20,
    "failed_policies": 0,
    "skipped_policies": 0,
    "by_priority": {
      "CRITICAL": {
        "tables": [
          "activity_summary",
          "audit_logs",
          "notifications"
        ],
        "statistics": {
          "total_tables": 3,
          "successful_tables": 6,
          "failed_tables": 0,
          "total_policies": 6,
          "optimized_policies": 10,
          "failed_policies": 0,
          "skipped_policies": 0
        }
      },
      "HIGH": {
        "tables": [
          "invoices",
          "project_budgets",
          "documents",
          "tasks",
          "task_comments",
          "field_reports"
        ],
        "statistics": {
          "total_tables": 3,
          "successful_tables": 6,
          "failed_tables": 0,
          "total_policies": 6,
          "optimized_policies": 10,
          "failed_policies": 0,
          "skipped_policies": 0
        }
      }
    }
  },
  "priority_breakdown": [
    {
      "priority": "CRITICAL",
      "tables": [
        "activity_summary",
        "audit_logs",
        "notifications"
      ],
      "results": {
        "timestamp": "2025-07-19T10:49:28.270Z",
        "workflow_status": "completed",
        "tables_processed": [
          {
            "table_name": "activity_summary",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.275Z",
            "policies": {
              "total": 2,
              "analyzed": 2,
              "optimized": 2,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                    "transformed": "user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          10
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          34
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "user_id = auth.uid()"
                },
                "transformed": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "user_id = (SELECT auth.uid())"
                },
                "changes_made": true,
                "transformations": {
                  "qual": null,
                  "with_check": {
                    "success": true,
                    "original": "user_id = auth.uid()",
                    "transformed": "user_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          10
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "activity_summary_select_policy",
                  "table_name": "activity_summary",
                  "drop_sql": "DROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";",
                  "create_sql": "CREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');",
                  "transaction_sql": "-- Policy optimization for activity_summary.activity_summary_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\n\n-- Create optimized policy\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for activity_summary.activity_summary_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\n\n-- Restore original policy\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "activity_summary_insert_policy",
                  "table_name": "activity_summary",
                  "drop_sql": "DROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";",
                  "create_sql": "CREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for activity_summary.activity_summary_insert_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\n\n-- Create optimized policy\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for activity_summary.activity_summary_insert_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\n\n-- Restore original policy\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- activity_summary.activity_summary_select_policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\n-- activity_summary.activity_summary_insert_policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback activity_summary.activity_summary_select_policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\n-- Rollback activity_summary.activity_summary_insert_policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "audit_logs",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.280Z",
            "policies": {
              "total": 1,
              "analyzed": 1,
              "optimized": 1,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "audit_logs",
                  "policyname": "audit_logs_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "(auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid()",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "audit_logs",
                  "policyname": "audit_logs_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid())",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "(auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid()",
                    "transformed": "((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          61
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          1
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "audit_logs_select_policy",
                  "table_name": "audit_logs",
                  "drop_sql": "DROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";",
                  "create_sql": "CREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for audit_logs.audit_logs_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\n\n-- Create optimized policy\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for audit_logs.audit_logs_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\n\n-- Restore original policy\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING ((auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- audit_logs.audit_logs_select_policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback audit_logs.audit_logs_select_policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING ((auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "notifications",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.284Z",
            "policies": {
              "total": 1,
              "analyzed": 1,
              "optimized": 1,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "notifications",
                  "policyname": "notifications_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "recipient_id = auth.uid()",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "notifications",
                  "policyname": "notifications_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "recipient_id = (SELECT auth.uid())",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "recipient_id = auth.uid()",
                    "transformed": "recipient_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          15
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "notifications_select_policy",
                  "table_name": "notifications",
                  "drop_sql": "DROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";",
                  "create_sql": "CREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for notifications.notifications_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\n\n-- Create optimized policy\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for notifications.notifications_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\n\n-- Restore original policy\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- notifications.notifications_select_policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback notifications.notifications_select_policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "invoices",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.292Z",
            "policies": {
              "total": 3,
              "analyzed": 3,
              "optimized": 3,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "invoices",
                  "policyname": "invoices_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "invoices",
                  "policyname": "invoices_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                    "transformed": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          37
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "invoices",
                  "policyname": "invoices_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')",
                  "with_check": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')"
                },
                "transformed": {
                  "tablename": "invoices",
                  "policyname": "invoices_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')",
                  "with_check": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')"
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')",
                    "transformed": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          37
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": {
                    "success": true,
                    "original": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')",
                    "transformed": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          37
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "invoices",
                  "policyname": "invoices_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "created_by = auth.uid()"
                },
                "transformed": {
                  "tablename": "invoices",
                  "policyname": "invoices_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "created_by = (SELECT auth.uid())"
                },
                "changes_made": true,
                "transformations": {
                  "qual": null,
                  "with_check": {
                    "success": true,
                    "original": "created_by = auth.uid()",
                    "transformed": "created_by = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "invoices_select_policy",
                  "table_name": "invoices",
                  "drop_sql": "DROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";",
                  "create_sql": "CREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');",
                  "transaction_sql": "-- Policy optimization for invoices.invoices_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\n\n-- Create optimized policy\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for invoices.invoices_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\n\n-- Restore original policy\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "invoices_update_policy",
                  "table_name": "invoices",
                  "drop_sql": "DROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";",
                  "create_sql": "CREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager'));",
                  "transaction_sql": "-- Policy optimization for invoices.invoices_update_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\n\n-- Create optimized policy\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager'));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for invoices.invoices_update_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\n\n-- Restore original policy\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager'));\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "invoices_insert_policy",
                  "table_name": "invoices",
                  "drop_sql": "DROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";",
                  "create_sql": "CREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for invoices.invoices_insert_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\n\n-- Create optimized policy\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for invoices.invoices_insert_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\n\n-- Restore original policy\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- invoices.invoices_select_policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\n-- invoices.invoices_update_policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager'));\n\n-- invoices.invoices_insert_policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback invoices.invoices_select_policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\n-- Rollback invoices.invoices_update_policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager'));\n\n-- Rollback invoices.invoices_insert_policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "documents",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.296Z",
            "policies": {
              "total": 2,
              "analyzed": 2,
              "optimized": 2,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "documents",
                  "policyname": "documents_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "documents",
                  "policyname": "documents_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]",
                    "transformed": "owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 2,
                        "positions": [
                          11,
                          46
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "documents",
                  "policyname": "documents_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = auth.uid()",
                  "with_check": "owner_id = auth.uid()"
                },
                "transformed": {
                  "tablename": "documents",
                  "policyname": "documents_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = (SELECT auth.uid())",
                  "with_check": "owner_id = (SELECT auth.uid())"
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "owner_id = auth.uid()",
                    "transformed": "owner_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          11
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": {
                    "success": true,
                    "original": "owner_id = auth.uid()",
                    "transformed": "owner_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          11
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "documents_select_policy",
                  "table_name": "documents",
                  "drop_sql": "DROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";",
                  "create_sql": "CREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]);",
                  "transaction_sql": "-- Policy optimization for documents.documents_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\n\n-- Create optimized policy\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]);\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for documents.documents_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\n\n-- Restore original policy\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]);\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "documents_update_policy",
                  "table_name": "documents",
                  "drop_sql": "DROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";",
                  "create_sql": "CREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = (SELECT auth.uid())) WITH CHECK (owner_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for documents.documents_update_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\n\n-- Create optimized policy\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = (SELECT auth.uid())) WITH CHECK (owner_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for documents.documents_update_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\n\n-- Restore original policy\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = auth.uid()) WITH CHECK (owner_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- documents.documents_select_policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]);\n\n-- documents.documents_update_policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = (SELECT auth.uid())) WITH CHECK (owner_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback documents.documents_select_policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]);\n\n-- Rollback documents.documents_update_policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = auth.uid()) WITH CHECK (owner_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "tasks",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.304Z",
            "policies": {
              "total": 1,
              "analyzed": 1,
              "optimized": 1,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "tasks",
                  "policyname": "tasks_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid())",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "tasks",
                  "policyname": "tasks_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid()))",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid())",
                    "transformed": "assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid()))",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 3,
                        "positions": [
                          14,
                          41,
                          110
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "tasks_select_policy",
                  "table_name": "tasks",
                  "drop_sql": "DROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";",
                  "create_sql": "CREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid())));",
                  "transaction_sql": "-- Policy optimization for tasks.tasks_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\n\n-- Create optimized policy\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid())));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for tasks.tasks_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\n\n-- Restore original policy\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid()));\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- tasks.tasks_select_policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid())));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback tasks.tasks_select_policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid()));\n\nCOMMIT;"
            },
            "errors": []
          }
        ],
        "overall_statistics": {
          "total_tables": 3,
          "successful_tables": 6,
          "failed_tables": 0,
          "total_policies": 6,
          "optimized_policies": 10,
          "failed_policies": 0,
          "skipped_policies": 0
        },
        "errors": [],
        "rollback_information": []
      }
    },
    {
      "priority": "HIGH",
      "tables": [
        "invoices",
        "project_budgets",
        "documents",
        "tasks",
        "task_comments",
        "field_reports"
      ],
      "results": {
        "timestamp": "2025-07-19T10:49:28.270Z",
        "workflow_status": "completed",
        "tables_processed": [
          {
            "table_name": "activity_summary",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.275Z",
            "policies": {
              "total": 2,
              "analyzed": 2,
              "optimized": 2,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                    "transformed": "user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          10
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          34
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "user_id = auth.uid()"
                },
                "transformed": {
                  "tablename": "activity_summary",
                  "policyname": "activity_summary_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "user_id = (SELECT auth.uid())"
                },
                "changes_made": true,
                "transformations": {
                  "qual": null,
                  "with_check": {
                    "success": true,
                    "original": "user_id = auth.uid()",
                    "transformed": "user_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          10
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "activity_summary_select_policy",
                  "table_name": "activity_summary",
                  "drop_sql": "DROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";",
                  "create_sql": "CREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');",
                  "transaction_sql": "-- Policy optimization for activity_summary.activity_summary_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\n\n-- Create optimized policy\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for activity_summary.activity_summary_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\n\n-- Restore original policy\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "activity_summary_insert_policy",
                  "table_name": "activity_summary",
                  "drop_sql": "DROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";",
                  "create_sql": "CREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for activity_summary.activity_summary_insert_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\n\n-- Create optimized policy\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for activity_summary.activity_summary_insert_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\n\n-- Restore original policy\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- activity_summary.activity_summary_select_policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\n-- activity_summary.activity_summary_insert_policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback activity_summary.activity_summary_select_policy\nDROP POLICY IF EXISTS \"activity_summary_select_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_select_policy\" ON \"activity_summary\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (user_id = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\n-- Rollback activity_summary.activity_summary_insert_policy\nDROP POLICY IF EXISTS \"activity_summary_insert_policy\" ON \"activity_summary\";\nCREATE POLICY \"activity_summary_insert_policy\" ON \"activity_summary\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (user_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "audit_logs",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.280Z",
            "policies": {
              "total": 1,
              "analyzed": 1,
              "optimized": 1,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "audit_logs",
                  "policyname": "audit_logs_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "(auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid()",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "audit_logs",
                  "policyname": "audit_logs_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid())",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "(auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid()",
                    "transformed": "((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          61
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          1
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "audit_logs_select_policy",
                  "table_name": "audit_logs",
                  "drop_sql": "DROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";",
                  "create_sql": "CREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for audit_logs.audit_logs_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\n\n-- Create optimized policy\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for audit_logs.audit_logs_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\n\n-- Restore original policy\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING ((auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- audit_logs.audit_logs_select_policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager') OR user_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback audit_logs.audit_logs_select_policy\nDROP POLICY IF EXISTS \"audit_logs_select_policy\" ON \"audit_logs\";\nCREATE POLICY \"audit_logs_select_policy\" ON \"audit_logs\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING ((auth.jwt() ->> 'role') IN ('admin', 'manager') OR user_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "notifications",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.284Z",
            "policies": {
              "total": 1,
              "analyzed": 1,
              "optimized": 1,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "notifications",
                  "policyname": "notifications_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "recipient_id = auth.uid()",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "notifications",
                  "policyname": "notifications_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "recipient_id = (SELECT auth.uid())",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "recipient_id = auth.uid()",
                    "transformed": "recipient_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          15
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "notifications_select_policy",
                  "table_name": "notifications",
                  "drop_sql": "DROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";",
                  "create_sql": "CREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for notifications.notifications_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\n\n-- Create optimized policy\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for notifications.notifications_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\n\n-- Restore original policy\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- notifications.notifications_select_policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback notifications.notifications_select_policy\nDROP POLICY IF EXISTS \"notifications_select_policy\" ON \"notifications\";\nCREATE POLICY \"notifications_select_policy\" ON \"notifications\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (recipient_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "invoices",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.292Z",
            "policies": {
              "total": 3,
              "analyzed": 3,
              "optimized": 3,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "invoices",
                  "policyname": "invoices_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "invoices",
                  "policyname": "invoices_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin'",
                    "transformed": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin'",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          37
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "invoices",
                  "policyname": "invoices_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')",
                  "with_check": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')"
                },
                "transformed": {
                  "tablename": "invoices",
                  "policyname": "invoices_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')",
                  "with_check": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')"
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')",
                    "transformed": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          37
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": {
                    "success": true,
                    "original": "created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')",
                    "transformed": "created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      },
                      {
                        "pattern": "direct_jwt_calls",
                        "count": 1,
                        "positions": [
                          37
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "invoices",
                  "policyname": "invoices_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "created_by = auth.uid()"
                },
                "transformed": {
                  "tablename": "invoices",
                  "policyname": "invoices_insert_policy",
                  "cmd": "INSERT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": null,
                  "with_check": "created_by = (SELECT auth.uid())"
                },
                "changes_made": true,
                "transformations": {
                  "qual": null,
                  "with_check": {
                    "success": true,
                    "original": "created_by = auth.uid()",
                    "transformed": "created_by = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          13
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "invoices_select_policy",
                  "table_name": "invoices",
                  "drop_sql": "DROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";",
                  "create_sql": "CREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');",
                  "transaction_sql": "-- Policy optimization for invoices.invoices_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\n\n-- Create optimized policy\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for invoices.invoices_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\n\n-- Restore original policy\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "invoices_update_policy",
                  "table_name": "invoices",
                  "drop_sql": "DROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";",
                  "create_sql": "CREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager'));",
                  "transaction_sql": "-- Policy optimization for invoices.invoices_update_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\n\n-- Create optimized policy\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager'));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for invoices.invoices_update_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\n\n-- Restore original policy\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager'));\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "invoices_insert_policy",
                  "table_name": "invoices",
                  "drop_sql": "DROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";",
                  "create_sql": "CREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for invoices.invoices_insert_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\n\n-- Create optimized policy\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for invoices.invoices_insert_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\n\n-- Restore original policy\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- invoices.invoices_select_policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') = 'admin');\n\n-- invoices.invoices_update_policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = (SELECT auth.uid()) OR ((SELECT auth.jwt()) ->> 'role') IN ('admin', 'manager'));\n\n-- invoices.invoices_insert_policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback invoices.invoices_select_policy\nDROP POLICY IF EXISTS \"invoices_select_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_select_policy\" ON \"invoices\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') = 'admin');\n\n-- Rollback invoices.invoices_update_policy\nDROP POLICY IF EXISTS \"invoices_update_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_update_policy\" ON \"invoices\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager')) WITH CHECK (created_by = auth.uid() OR (auth.jwt() ->> 'role') IN ('admin', 'manager'));\n\n-- Rollback invoices.invoices_insert_policy\nDROP POLICY IF EXISTS \"invoices_insert_policy\" ON \"invoices\";\nCREATE POLICY \"invoices_insert_policy\" ON \"invoices\" AS PERMISSIVE FOR INSERT TO \"authenticated\" WITH CHECK (created_by = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "documents",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.296Z",
            "policies": {
              "total": 2,
              "analyzed": 2,
              "optimized": 2,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "documents",
                  "policyname": "documents_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "documents",
                  "policyname": "documents_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]",
                    "transformed": "owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 2,
                        "positions": [
                          11,
                          46
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              },
              {
                "success": true,
                "original": {
                  "tablename": "documents",
                  "policyname": "documents_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = auth.uid()",
                  "with_check": "owner_id = auth.uid()"
                },
                "transformed": {
                  "tablename": "documents",
                  "policyname": "documents_update_policy",
                  "cmd": "UPDATE",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "owner_id = (SELECT auth.uid())",
                  "with_check": "owner_id = (SELECT auth.uid())"
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "owner_id = auth.uid()",
                    "transformed": "owner_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          11
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": {
                    "success": true,
                    "original": "owner_id = auth.uid()",
                    "transformed": "owner_id = (SELECT auth.uid())",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 1,
                        "positions": [
                          11
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  }
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "documents_select_policy",
                  "table_name": "documents",
                  "drop_sql": "DROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";",
                  "create_sql": "CREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]);",
                  "transaction_sql": "-- Policy optimization for documents.documents_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\n\n-- Create optimized policy\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]);\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for documents.documents_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\n\n-- Restore original policy\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]);\n\nCOMMIT;"
                },
                {
                  "success": true,
                  "policy_name": "documents_update_policy",
                  "table_name": "documents",
                  "drop_sql": "DROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";",
                  "create_sql": "CREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = (SELECT auth.uid())) WITH CHECK (owner_id = (SELECT auth.uid()));",
                  "transaction_sql": "-- Policy optimization for documents.documents_update_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\n\n-- Create optimized policy\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = (SELECT auth.uid())) WITH CHECK (owner_id = (SELECT auth.uid()));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for documents.documents_update_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\n\n-- Restore original policy\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = auth.uid()) WITH CHECK (owner_id = auth.uid());\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- documents.documents_select_policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = (SELECT auth.uid()) OR shared_with @> ARRAY[(SELECT auth.uid())]);\n\n-- documents.documents_update_policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = (SELECT auth.uid())) WITH CHECK (owner_id = (SELECT auth.uid()));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback documents.documents_select_policy\nDROP POLICY IF EXISTS \"documents_select_policy\" ON \"documents\";\nCREATE POLICY \"documents_select_policy\" ON \"documents\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (owner_id = auth.uid() OR shared_with @> ARRAY[auth.uid()]);\n\n-- Rollback documents.documents_update_policy\nDROP POLICY IF EXISTS \"documents_update_policy\" ON \"documents\";\nCREATE POLICY \"documents_update_policy\" ON \"documents\" AS PERMISSIVE FOR UPDATE TO \"authenticated\" USING (owner_id = auth.uid()) WITH CHECK (owner_id = auth.uid());\n\nCOMMIT;"
            },
            "errors": []
          },
          {
            "table_name": "tasks",
            "status": "completed_successfully",
            "timestamp": "2025-07-19T10:49:28.304Z",
            "policies": {
              "total": 1,
              "analyzed": 1,
              "optimized": 1,
              "failed": 0,
              "skipped": 0,
              "no_changes_needed": 0
            },
            "transformations": [
              {
                "success": true,
                "original": {
                  "tablename": "tasks",
                  "policyname": "tasks_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid())",
                  "with_check": null
                },
                "transformed": {
                  "tablename": "tasks",
                  "policyname": "tasks_select_policy",
                  "cmd": "SELECT",
                  "permissive": "PERMISSIVE",
                  "roles": [
                    "authenticated"
                  ],
                  "qual": "assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid()))",
                  "with_check": null
                },
                "changes_made": true,
                "transformations": {
                  "qual": {
                    "success": true,
                    "original": "assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid())",
                    "transformed": "assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid()))",
                    "changes_made": true,
                    "transformations": [
                      {
                        "pattern": "direct_uid_calls",
                        "count": 3,
                        "positions": [
                          14,
                          41,
                          110
                        ]
                      }
                    ],
                    "validation": {
                      "valid": true,
                      "issues": [],
                      "checks": {
                        "parentheses_balanced": true,
                        "logical_operators_preserved": true,
                        "no_syntax_errors": true
                      }
                    },
                    "pattern_type": "comprehensive"
                  },
                  "with_check": null
                }
              }
            ],
            "sql_statements": {
              "individual": [
                {
                  "success": true,
                  "policy_name": "tasks_select_policy",
                  "table_name": "tasks",
                  "drop_sql": "DROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";",
                  "create_sql": "CREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid())));",
                  "transaction_sql": "-- Policy optimization for tasks.tasks_select_policy\nBEGIN;\n\n-- Drop existing policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\n\n-- Create optimized policy\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid())));\n\nCOMMIT;",
                  "rollback_sql": "-- Rollback for tasks.tasks_select_policy\nBEGIN;\n\n-- Drop optimized policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\n\n-- Restore original policy\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid()));\n\nCOMMIT;"
                }
              ],
              "batch_transaction": "-- Batch Policy Optimization Transaction\nBEGIN;\n\n-- tasks.tasks_select_policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = (SELECT auth.uid()) OR created_by = (SELECT auth.uid()) OR project_id IN (SELECT id FROM projects WHERE user_id = (SELECT auth.uid())));\n\nCOMMIT;",
              "rollback_transaction": "-- Batch Policy Optimization Rollback\nBEGIN;\n\n-- Rollback tasks.tasks_select_policy\nDROP POLICY IF EXISTS \"tasks_select_policy\" ON \"tasks\";\nCREATE POLICY \"tasks_select_policy\" ON \"tasks\" AS PERMISSIVE FOR SELECT TO \"authenticated\" USING (assigned_to = auth.uid() OR created_by = auth.uid() OR project_id IN (SELECT id FROM projects WHERE user_id = auth.uid()));\n\nCOMMIT;"
            },
            "errors": []
          }
        ],
        "overall_statistics": {
          "total_tables": 3,
          "successful_tables": 6,
          "failed_tables": 0,
          "total_policies": 6,
          "optimized_policies": 10,
          "failed_policies": 0,
          "skipped_policies": 0
        },
        "errors": [],
        "rollback_information": []
      }
    }
  ],
  "table_priorities": {
    "activity_summary": {
      "priority": "CRITICAL",
      "direct_calls": 2,
      "description": "User activity tracking with frequent RLS checks"
    },
    "audit_logs": {
      "priority": "CRITICAL",
      "direct_calls": 1,
      "description": "System audit logging with user-based filtering"
    },
    "notifications": {
      "priority": "CRITICAL",
      "direct_calls": 1,
      "description": "User notification system with high query volume"
    },
    "tasks": {
      "priority": "HIGH",
      "direct_calls": 1,
      "description": "Project task management with user assignments"
    },
    "task_comments": {
      "priority": "HIGH",
      "direct_calls": 1,
      "description": "Task discussion threads with user permissions"
    },
    "field_reports": {
      "priority": "HIGH",
      "direct_calls": 1,
      "description": "Field reporting system with user-based access"
    },
    "invoices": {
      "priority": "HIGH",
      "direct_calls": 3,
      "description": "Invoice management with complex user permissions"
    },
    "invoice_items": {
      "priority": "MEDIUM",
      "direct_calls": 1,
      "description": "Invoice line items with inherited permissions"
    },
    "payments": {
      "priority": "MEDIUM",
      "direct_calls": 1,
      "description": "Payment processing with user-based access"
    },
    "project_budgets": {
      "priority": "HIGH",
      "direct_calls": 2,
      "description": "Project budget management with role-based access"
    },
    "system_settings": {
      "priority": "MEDIUM",
      "direct_calls": 1,
      "description": "System configuration with admin access controls"
    },
    "permission_templates": {
      "priority": "MEDIUM",
      "direct_calls": 1,
      "description": "Permission template management"
    },
    "documents": {
      "priority": "HIGH",
      "direct_calls": 2,
      "description": "Document management with user-based permissions"
    },
    "document_approvals": {
      "priority": "MEDIUM",
      "direct_calls": 1,
      "description": "Document approval workflow"
    },
    "suppliers": {
      "priority": "MEDIUM",
      "direct_calls": 2,
      "description": "Supplier management with user-based access"
    },
    "mobile_devices": {
      "priority": "LOW",
      "direct_calls": 1,
      "description": "Mobile device registration and management"
    },
    "tenders": {
      "priority": "MEDIUM",
      "direct_calls": 1,
      "description": "Tender management with role-based permissions"
    }
  },
  "recommendations": [
    {
      "priority": "HIGH",
      "action": "Monitor Performance Advisor metrics after optimization",
      "description": "Track query performance improvements in Supabase dashboard",
      "impact": "Validate optimization effectiveness"
    },
    {
      "priority": "CRITICAL",
      "action": "Execute critical priority optimizations",
      "description": "10 policies in critical priority tables",
      "impact": "Maximum performance impact"
    },
    {
      "priority": "HIGH",
      "action": "Execute high priority optimizations",
      "description": "10 policies in high priority tables",
      "impact": "High performance impact"
    }
  ]
}